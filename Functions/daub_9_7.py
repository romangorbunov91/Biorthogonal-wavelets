import numpy as np
def daub_9_7(N):
    if ((N > 1)&((N % 2) == 0)):
        
        alpha = [0.0378284554956993,
                -0.0238494650131592,
                -0.1106244040858110,
                 0.3774028555126330,
                 0.8526986788369790,
                 0.3774028555126330,
                -0.1106244040858110,
                -0.0238494650131592,
                 0.0378284554956993]
        
        beta =  [0.0645388826835489,
                -0.0406894176455255,
                -0.4180922728819960,
                 0.7884856169846440,
                -0.4180922728819960,
                -0.0406894176455255,
                 0.0645388826835489]
        
        N_alpha = len(alpha)
        N_beta = len(beta)
        
        V = np.zeros((N//2, (N + (N_alpha-2))))
        W = np.zeros((N//2, (N + (N_beta-2 ))))
        
        for idx in range(N//2):
            V[idx,(2*idx):(2*idx+N_alpha)] = alpha
            W[idx,(2*idx):(2*idx+N_beta )] = beta
        
        # Even symmetry.
        V[:,5] += V[:,3]
        V[:,6] += V[:,2]
        V[:,7] += V[:,1]
        V[:,8] += V[:,0]
        V[:,-7] += V[:,-1]
        V[:,-6] += V[:,-2]
        V[:,-5] += V[:,-3]
        
        W[:,5] += W[:,1]
        W[:,6] += W[:,0]
        W[:,-7] += W[:,-1]
        W[:,-6] += W[:,-2]
        W[:,-5] += W[:,-3]
    else:
        print('USER ERROR: Length (N) is incorrect!!!')
    return V[:,4:-3], W[:,2:-3]